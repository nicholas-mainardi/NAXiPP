/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : Grammar/RFC5280.g
 *     -                            On : 2019-02-19 19:36:55
 *     -                 for the lexer : RFC5280LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
RFC5280Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pRFC5280Lexer, which is returned from a call to RFC5280LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pRFC5280Lexer are  as follows:
 *
 *  - 
 void
      pRFC5280Lexer->OctetTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedOctetTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->IntTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->BitStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedBitStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->BitStringKeyCert(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->PrintStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->IA5StringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->UTCTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TrueTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->FalseTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->UTF8Tag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TeletexTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->BMPTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->UniverStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GeneralTimeTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->VisibleStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->NumericStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GeneralStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GraphicalStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->VideoStringTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SequenceTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SetTag(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag0(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag0(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag1(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag1(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag2(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag2(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag3(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag3(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag4(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag4(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag5(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag5(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag6(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag6(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag7(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag7(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ConstructedTag8(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tag8(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->AppTag1(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->AppTag2(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Int0(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Int1(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Int2(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Null(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt1(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt2(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt3(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt4(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt5(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt6(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt7(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt8(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt9(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt10(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt11(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt12(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt13(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt14(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt15(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt16(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt17(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt18(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt19(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt20(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt21(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt22(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TagInt23(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->LENGTH(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->EXTSOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->DNOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->PRIVATEEXTSOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->HASHOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->DSADHOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GOSTOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA1OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ECKAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDCN(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDON(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->NAMEOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SURNAMEOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDGIVENAME(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDINIT(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDGENQUALIFIER(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDLOCAL(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDSORP(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDOU(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDTITLE(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDDNQUALIFIER(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDCOUNTRY(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDSERIAL(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDPSEUDO(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDAKI(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDSKI(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDCERTPOL(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ANYPOLICYOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDKEYUS(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDPOLMAP(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDSUBALT(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDISSALT(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDSUBDIR(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDBC(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDNAME(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDPOLCONST(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDEXTKEY(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ANYUSAGEOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDCRL(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDINHIBIT(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OIDFRESHCRL(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->AIAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SIAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->CAISSUEROID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OCSPOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->CAREPOOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TSPOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->CPSOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->UNOTICEOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SERVERAUTHOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->CLIENTAUTHOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->CODESIGNOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->EMAILPROTECTOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TIMESTAMPOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->OCSPSIGNOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->RSAPKOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->MGF1OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->RSAPSSOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->RSAOAEPOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->PSPECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->MD2RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->MD5RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA1RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA224RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA256RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA384RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA512RSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->LEGACYEMAILOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ECPKOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->PRIMEOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->BASIS2OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GNBASISOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->TPBASISOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->PPBASISOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA1ECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA224ECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA256ECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA384ECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA512ECOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA224OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA256OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA384OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA512OID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->KEAPKOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA224DSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA256DSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->DSAPKOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->DHPKOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->SHA1DSAOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GOST94PK(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GOST01PK(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GOST94SIGN(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->GOST01SIGN(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ECDHOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->ECMQVOID(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->PRINTABLE(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->VAL4(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->VAL2(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->VAL(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->VALUE(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->EVERY(pRFC5280Lexer)
 *  - 
 void
      pRFC5280Lexer->Tokens(pRFC5280Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_RFC5280Lexer_H
#define _RFC5280Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct RFC5280Lexer_Ctx_struct RFC5280Lexer, * pRFC5280Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
RFC5280Lexer

 */
struct RFC5280Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mOctetTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedOctetTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mIntTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mBitStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedBitStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mBitStringKeyCert)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mPrintStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mIA5StringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mUTCTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTrueTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mFalseTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mUTF8Tag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTeletexTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mBMPTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mUniverStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGeneralTimeTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mVisibleStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mNumericStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGeneralStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGraphicalStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mVideoStringTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSequenceTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSetTag)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag0)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag0)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag1)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag1)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag2)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag2)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag3)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag3)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag4)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag4)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag5)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag5)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag6)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag6)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag7)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag7)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mConstructedTag8)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTag8)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mAppTag1)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mAppTag2)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mInt0)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mInt1)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mInt2)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mNull)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt1)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt2)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt3)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt4)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt5)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt6)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt7)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt8)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt9)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt10)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt11)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt12)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt13)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt14)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt15)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt16)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt17)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt18)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt19)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt20)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt21)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt22)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTagInt23)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mLENGTH)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mEXTSOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mDNOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mPRIVATEEXTSOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mRSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mHASHOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mDSADHOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGOSTOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA1OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mECKAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDCN)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDON)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mNAMEOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSURNAMEOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDGIVENAME)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDINIT)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDGENQUALIFIER)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDLOCAL)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDSORP)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDOU)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDTITLE)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDDNQUALIFIER)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDCOUNTRY)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDSERIAL)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDPSEUDO)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDAKI)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDSKI)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDCERTPOL)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mANYPOLICYOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDKEYUS)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDPOLMAP)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDSUBALT)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDISSALT)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDSUBDIR)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDBC)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDNAME)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDPOLCONST)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDEXTKEY)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mANYUSAGEOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDCRL)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDINHIBIT)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOIDFRESHCRL)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mAIAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSIAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mCAISSUEROID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOCSPOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mCAREPOOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTSPOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mCPSOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mUNOTICEOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSERVERAUTHOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mCLIENTAUTHOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mCODESIGNOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mEMAILPROTECTOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTIMESTAMPOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mOCSPSIGNOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mRSAPKOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mMGF1OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mRSAPSSOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mRSAOAEPOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mPSPECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mMD2RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mMD5RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA1RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA224RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA256RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA384RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA512RSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mLEGACYEMAILOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mECPKOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mPRIMEOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mBASIS2OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGNBASISOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTPBASISOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mPPBASISOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA1ECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA224ECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA256ECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA384ECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA512ECOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA224OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA256OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA384OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA512OID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mKEAPKOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA224DSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA256DSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mDSAPKOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mDHPKOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mSHA1DSAOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGOST94PK)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGOST01PK)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGOST94SIGN)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mGOST01SIGN)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mECDHOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mECMQVOID)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mPRINTABLE)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mVAL4)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mVAL2)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mVAL)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mVALUE)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mEVERY)	(struct RFC5280Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct RFC5280Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct RFC5280Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct RFC5280Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pRFC5280Lexer RFC5280LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pRFC5280Lexer RFC5280LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define AIAOID      4
#define ANYPOLICYOID      5
#define ANYUSAGEOID      6
#define AppTag1      7
#define AppTag2      8
#define BASIS2OID      9
#define BMPTag      10
#define BitStringKeyCert      11
#define BitStringTag      12
#define CAISSUEROID      13
#define CAREPOOID      14
#define CLIENTAUTHOID      15
#define CODESIGNOID      16
#define CPSOID      17
#define ConstructedBitStringTag      18
#define ConstructedOctetTag      19
#define ConstructedTag0      20
#define ConstructedTag1      21
#define ConstructedTag2      22
#define ConstructedTag3      23
#define ConstructedTag4      24
#define ConstructedTag5      25
#define ConstructedTag6      26
#define ConstructedTag7      27
#define ConstructedTag8      28
#define DHPKOID      29
#define DNOID      30
#define DSADHOID      31
#define DSAPKOID      32
#define ECDHOID      33
#define ECKAOID      34
#define ECMQVOID      35
#define ECOID      36
#define ECPKOID      37
#define EMAILPROTECTOID      38
#define EVERY      39
#define EXTSOID      40
#define FalseTag      41
#define GNBASISOID      42
#define GOST01PK      43
#define GOST01SIGN      44
#define GOST94PK      45
#define GOST94SIGN      46
#define GOSTOID      47
#define GeneralStringTag      48
#define GeneralTimeTag      49
#define GraphicalStringTag      50
#define HASHOID      51
#define IA5StringTag      52
#define Int0      53
#define Int1      54
#define Int2      55
#define IntTag      56
#define KEAPKOID      57
#define LEGACYEMAILOID      58
#define LENGTH      59
#define MD2RSAOID      60
#define MD5RSAOID      61
#define MGF1OID      62
#define NAMEOID      63
#define Null      64
#define NumericStringTag      65
#define OCSPOID      66
#define OCSPSIGNOID      67
#define OIDAKI      68
#define OIDBC      69
#define OIDCERTPOL      70
#define OIDCN      71
#define OIDCOUNTRY      72
#define OIDCRL      73
#define OIDDNQUALIFIER      74
#define OIDEXTKEY      75
#define OIDFRESHCRL      76
#define OIDGENQUALIFIER      77
#define OIDGIVENAME      78
#define OIDINHIBIT      79
#define OIDINIT      80
#define OIDISSALT      81
#define OIDKEYUS      82
#define OIDLOCAL      83
#define OIDNAME      84
#define OIDON      85
#define OIDOU      86
#define OIDPOLCONST      87
#define OIDPOLMAP      88
#define OIDPSEUDO      89
#define OIDSERIAL      90
#define OIDSKI      91
#define OIDSORP      92
#define OIDSUBALT      93
#define OIDSUBDIR      94
#define OIDTITLE      95
#define OIDTag      96
#define OctetTag      97
#define PPBASISOID      98
#define PRIMEOID      99
#define PRINTABLE      100
#define PRIVATEEXTSOID      101
#define PSPECOID      102
#define PrintStringTag      103
#define RSAOAEPOID      104
#define RSAOID      105
#define RSAPKOID      106
#define RSAPSSOID      107
#define SERVERAUTHOID      108
#define SHA1DSAOID      109
#define SHA1ECOID      110
#define SHA1OID      111
#define SHA1RSAOID      112
#define SHA224DSAOID      113
#define SHA224ECOID      114
#define SHA224OID      115
#define SHA224RSAOID      116
#define SHA256DSAOID      117
#define SHA256ECOID      118
#define SHA256OID      119
#define SHA256RSAOID      120
#define SHA384ECOID      121
#define SHA384OID      122
#define SHA384RSAOID      123
#define SHA512ECOID      124
#define SHA512OID      125
#define SHA512RSAOID      126
#define SIAOID      127
#define SURNAMEOID      128
#define SequenceTag      129
#define SetTag      130
#define TIMESTAMPOID      131
#define TPBASISOID      132
#define TSPOID      133
#define Tag0      134
#define Tag1      135
#define Tag2      136
#define Tag3      137
#define Tag4      138
#define Tag5      139
#define Tag6      140
#define Tag7      141
#define Tag8      142
#define TagInt1      143
#define TagInt10      144
#define TagInt11      145
#define TagInt12      146
#define TagInt13      147
#define TagInt14      148
#define TagInt15      149
#define TagInt16      150
#define TagInt17      151
#define TagInt18      152
#define TagInt19      153
#define TagInt2      154
#define TagInt20      155
#define TagInt21      156
#define TagInt22      157
#define TagInt23      158
#define TagInt3      159
#define TagInt4      160
#define TagInt5      161
#define TagInt6      162
#define TagInt7      163
#define TagInt8      164
#define TagInt9      165
#define TeletexTag      166
#define TrueTag      167
#define UNOTICEOID      168
#define UTCTag      169
#define UTF8Tag      170
#define UniverStringTag      171
#define VAL      172
#define VAL2      173
#define VAL4      174
#define VALUE      175
#define VideoStringTag      176
#define VisibleStringTag      177
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for RFC5280Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
